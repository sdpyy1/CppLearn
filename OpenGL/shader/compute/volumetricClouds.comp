#version 430 core

layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

layout(rgba32f, binding = 0) uniform writeonly image3D noiseTex;

uniform ivec3 texSize;

float valueNoise(vec3 pos) {
    float v = fract(sin(dot(pos, vec3(12.9898, 78.233, 45.164))) * 43758.5453);
    return pow(v, 2.0);  // 让亮度降低，整体更暗更柔和
}
// -------------------------------------- Worley Begin--------------------------------------
vec3 permute(vec3 x) {
    return mod((34.0 * x + 1.0) * x, 289.0);
}
vec2 cellular(vec3 P) {
    #define K 0.142857142857 // 1/7
#define Ko 0.428571428571 // 1/2-K/2
#define K2 0.020408163265306 // 1/(7*7)
#define Kz 0.166666666667 // 1/6
#define Kzo 0.416666666667 // 1/2-1/6*2
#define jitter 1.0 // smaller jitter gives more regular pattern

    vec3 Pi = mod(floor(P), 289.0);
    vec3 Pf = fract(P) - 0.5;

    vec3 Pfx = Pf.x + vec3(1.0, 0.0, -1.0);
    vec3 Pfy = Pf.y + vec3(1.0, 0.0, -1.0);
    vec3 Pfz = Pf.z + vec3(1.0, 0.0, -1.0);

    vec3 p = permute(Pi.x + vec3(-1.0, 0.0, 1.0));
    vec3 p1 = permute(p + Pi.y - 1.0);
    vec3 p2 = permute(p + Pi.y);
    vec3 p3 = permute(p + Pi.y + 1.0);

    vec3 p11 = permute(p1 + Pi.z - 1.0);
    vec3 p12 = permute(p1 + Pi.z);
    vec3 p13 = permute(p1 + Pi.z + 1.0);

    vec3 p21 = permute(p2 + Pi.z - 1.0);
    vec3 p22 = permute(p2 + Pi.z);
    vec3 p23 = permute(p2 + Pi.z + 1.0);

    vec3 p31 = permute(p3 + Pi.z - 1.0);
    vec3 p32 = permute(p3 + Pi.z);
    vec3 p33 = permute(p3 + Pi.z + 1.0);

    vec3 ox11 = fract(p11*K) - Ko;
    vec3 oy11 = mod(floor(p11*K), 7.0)*K - Ko;
    vec3 oz11 = floor(p11*K2)*Kz - Kzo; // p11 < 289 guaranteed

    vec3 ox12 = fract(p12*K) - Ko;
    vec3 oy12 = mod(floor(p12*K), 7.0)*K - Ko;
    vec3 oz12 = floor(p12*K2)*Kz - Kzo;

    vec3 ox13 = fract(p13*K) - Ko;
    vec3 oy13 = mod(floor(p13*K), 7.0)*K - Ko;
    vec3 oz13 = floor(p13*K2)*Kz - Kzo;

    vec3 ox21 = fract(p21*K) - Ko;
    vec3 oy21 = mod(floor(p21*K), 7.0)*K - Ko;
    vec3 oz21 = floor(p21*K2)*Kz - Kzo;

    vec3 ox22 = fract(p22*K) - Ko;
    vec3 oy22 = mod(floor(p22*K), 7.0)*K - Ko;
    vec3 oz22 = floor(p22*K2)*Kz - Kzo;

    vec3 ox23 = fract(p23*K) - Ko;
    vec3 oy23 = mod(floor(p23*K), 7.0)*K - Ko;
    vec3 oz23 = floor(p23*K2)*Kz - Kzo;

    vec3 ox31 = fract(p31*K) - Ko;
    vec3 oy31 = mod(floor(p31*K), 7.0)*K - Ko;
    vec3 oz31 = floor(p31*K2)*Kz - Kzo;

    vec3 ox32 = fract(p32*K) - Ko;
    vec3 oy32 = mod(floor(p32*K), 7.0)*K - Ko;
    vec3 oz32 = floor(p32*K2)*Kz - Kzo;

    vec3 ox33 = fract(p33*K) - Ko;
    vec3 oy33 = mod(floor(p33*K), 7.0)*K - Ko;
    vec3 oz33 = floor(p33*K2)*Kz - Kzo;

    vec3 dx11 = Pfx + jitter*ox11;
    vec3 dy11 = Pfy.x + jitter*oy11;
    vec3 dz11 = Pfz.x + jitter*oz11;

    vec3 dx12 = Pfx + jitter*ox12;
    vec3 dy12 = Pfy.x + jitter*oy12;
    vec3 dz12 = Pfz.y + jitter*oz12;

    vec3 dx13 = Pfx + jitter*ox13;
    vec3 dy13 = Pfy.x + jitter*oy13;
    vec3 dz13 = Pfz.z + jitter*oz13;

    vec3 dx21 = Pfx + jitter*ox21;
    vec3 dy21 = Pfy.y + jitter*oy21;
    vec3 dz21 = Pfz.x + jitter*oz21;

    vec3 dx22 = Pfx + jitter*ox22;
    vec3 dy22 = Pfy.y + jitter*oy22;
    vec3 dz22 = Pfz.y + jitter*oz22;

    vec3 dx23 = Pfx + jitter*ox23;
    vec3 dy23 = Pfy.y + jitter*oy23;
    vec3 dz23 = Pfz.z + jitter*oz23;

    vec3 dx31 = Pfx + jitter*ox31;
    vec3 dy31 = Pfy.z + jitter*oy31;
    vec3 dz31 = Pfz.x + jitter*oz31;

    vec3 dx32 = Pfx + jitter*ox32;
    vec3 dy32 = Pfy.z + jitter*oy32;
    vec3 dz32 = Pfz.y + jitter*oz32;

    vec3 dx33 = Pfx + jitter*ox33;
    vec3 dy33 = Pfy.z + jitter*oy33;
    vec3 dz33 = Pfz.z + jitter*oz33;

    vec3 d11 = dx11 * dx11 + dy11 * dy11 + dz11 * dz11;
    vec3 d12 = dx12 * dx12 + dy12 * dy12 + dz12 * dz12;
    vec3 d13 = dx13 * dx13 + dy13 * dy13 + dz13 * dz13;
    vec3 d21 = dx21 * dx21 + dy21 * dy21 + dz21 * dz21;
    vec3 d22 = dx22 * dx22 + dy22 * dy22 + dz22 * dz22;
    vec3 d23 = dx23 * dx23 + dy23 * dy23 + dz23 * dz23;
    vec3 d31 = dx31 * dx31 + dy31 * dy31 + dz31 * dz31;
    vec3 d32 = dx32 * dx32 + dy32 * dy32 + dz32 * dz32;
    vec3 d33 = dx33 * dx33 + dy33 * dy33 + dz33 * dz33;

    // Sort out the two smallest distances (F1, F2)
    #if 0
	// Cheat and sort out only F1
    vec3 d1 = min(min(d11,d12), d13);
    vec3 d2 = min(min(d21,d22), d23);
    vec3 d3 = min(min(d31,d32), d33);
    vec3 d = min(min(d1,d2), d3);
    d.x = min(min(d.x,d.y),d.z);
    return sqrt(d.xx); // F1 duplicated, no F2 computed
    #else
	// Do it right and sort out both F1 and F2
    vec3 d1a = min(d11, d12);
    d12 = max(d11, d12);
    d11 = min(d1a, d13); // Smallest now not in d12 or d13
    d13 = max(d1a, d13);
    d12 = min(d12, d13); // 2nd smallest now not in d13
    vec3 d2a = min(d21, d22);
    d22 = max(d21, d22);
    d21 = min(d2a, d23); // Smallest now not in d22 or d23
    d23 = max(d2a, d23);
    d22 = min(d22, d23); // 2nd smallest now not in d23
    vec3 d3a = min(d31, d32);
    d32 = max(d31, d32);
    d31 = min(d3a, d33); // Smallest now not in d32 or d33
    d33 = max(d3a, d33);
    d32 = min(d32, d33); // 2nd smallest now not in d33
    vec3 da = min(d11, d21);
    d21 = max(d11, d21);
    d11 = min(da, d31); // Smallest now in d11
    d31 = max(da, d31); // 2nd smallest now not in d31
    d11.xy = (d11.x < d11.y) ? d11.xy : d11.yx;
    d11.xz = (d11.x < d11.z) ? d11.xz : d11.zx; // d11.x now smallest
    d12 = min(d12, d21); // 2nd smallest now not in d21
    d12 = min(d12, d22); // nor in d22
    d12 = min(d12, d31); // nor in d31
    d12 = min(d12, d32); // nor in d32
    d11.yz = min(d11.yz,d12.xy); // nor in d12.yz
    d11.y = min(d11.y,d12.z); // Only two more to go
    d11.y = min(d11.y,d11.z); // Done! (Phew!)
    return sqrt(d11.xy); // F1, F2
    #endif
}
float worleyNoise3D(vec3 P) {
    vec2 F = cellular(P);
    return F.y - F.x;
}
// -------------------------------------- Worley End--------------------------------------




// -------------------------------------- Simplex Begin--------------------------------------
// Simplex 3D Noise by Ian McEwan, Ashima Arts.
// https://github.com/ashima/webgl-noise

vec3 mod289(vec3 x) {
    return x - floor(x * (1.0 / 289.0)) * 289.0;
}
vec4 mod289(vec4 x) {
    return x - floor(x * (1.0 / 289.0)) * 289.0;
}
vec4 permute(vec4 x) {
    return mod289(((x*34.0)+1.0)*x);
}
vec4 taylorInvSqrt(vec4 r) {
    return 1.79284291400159 - 0.85373472095314 * r;
}
float snoise(vec3 v) {
    const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;
    const float D = 0.5;

    // First corner
    vec3 i  = floor(v + dot(v, C.yyy) );
    vec3 x0 = v - i + dot(i, C.xxx);

    // Other corners
    vec3 g = step(x0.yzx, x0.xyz);
    vec3 l = 1.0 - g;
    vec3 i1 = min( g.xyz, l.zxy );
    vec3 i2 = max( g.xyz, l.zxy );

    // Offsets for remaining corners
    vec3 x1 = x0 - i1 + C.xxx;
    vec3 x2 = x0 - i2 + C.yyy;
    vec3 x3 = x0 - D;

    // Permutations
    i = mod289(i);
    vec4 p = permute( permute( permute(
                                   i.z + vec4(0.0, i1.z, i2.z, 1.0 ))
                               + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))
                      + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));

    // Gradients: 7x7x6 points over a cube, mapped onto 12 directions
    float n_ = 1.0/7.0; // 1/7
    vec3  ns = n_ * vec3(1.0, 2.0, 3.0) - vec3(0.0, 1.0, 2.0);

    vec4 j = p - 49.0 * floor(p * ns.z * ns.z);

    vec4 x_ = floor(j * ns.z);
    vec4 y_ = floor(j - 7.0 * x_ );

    vec4 x = x_ * ns.x + ns.y;
    vec4 y = y_ * ns.x + ns.y;
    vec4 h = 1.0 - abs(x) - abs(y);

    vec4 b0 = vec4( x.xy, y.xy );
    vec4 b1 = vec4( x.zw, y.zw );

    vec4 s0 = floor(b0)*2.0 + 1.0;
    vec4 s1 = floor(b1)*2.0 + 1.0;
    vec4 sh = -step(h, vec4(0.0));

    vec4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
    vec4 a1 = b1.xzyw + s1.xzyw * sh.zzww;

    vec3 p0 = vec3(a0.xy,h.x);
    vec3 p1 = vec3(a0.zw,h.y);
    vec3 p2 = vec3(a1.xy,h.z);
    vec3 p3 = vec3(a1.zw,h.w);

    // Normalize gradients
    vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2,p2), dot(p3,p3)));
    p0 *= norm.x;
    p1 *= norm.y;
    p2 *= norm.z;
    p3 *= norm.w;

    // Calculate noise contributions
    vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);
    m = m * m;
    return 42.0 * dot(m*m, vec4(dot(p0,x0), dot(p1,x1), dot(p2,x2), dot(p3,x3)));
}

// -------------------------------------- Simplex End--------------------------------------


// -------------------------------------- Perlin Begin --------------------------------------
// Classic Perlin Noise 3D implementation by Ken Perlin
// -------------------------------------- Perlin Begin --------------------------------------

vec3 fade(vec3 t) {
    // Perlin 曲线渐变函数 6t^5 - 15t^4 + 10t^3
    return t * t * t * (t * (t * 6.0 - 15.0) + 10.0);
}

// 伪随机哈希，基于pos生成0~255的整数
float hash(float n) {
    return fract(sin(n) * 43758.5453123);
}

// 伪随机梯度方向向量生成，返回单位向量
vec3 grad(float hash, vec3 p) {
    // 将hash映射到8个方向中的一个
    int h = int(floor(hash * 8.0)) & 7;
    vec3 gradDir;

    if (h == 0) gradDir = vec3(1,1,0);
    else if (h == 1) gradDir = vec3(-1,1,0);
    else if (h == 2) gradDir = vec3(1,-1,0);
    else if (h == 3) gradDir = vec3(-1,-1,0);
    else if (h == 4) gradDir = vec3(1,0,1);
    else if (h == 5) gradDir = vec3(-1,0,1);
    else if (h == 6) gradDir = vec3(1,0,-1);
    else gradDir = vec3(-1,0,-1);

    // 点积，计算梯度对p的影响
    return normalize(gradDir);
}

// Perlin Noise 3D 主函数，输入pos返回[-1,1]区间噪声值
float perlinNoise3D(vec3 pos) {
    // 单位立方体内的位置
    vec3 pi = floor(pos);
    vec3 pf = fract(pos);

    vec3 f = fade(pf);

    // 八个格点对应的hash值
    float n000 = hash(dot(pi + vec3(0.0, 0.0, 0.0), vec3(1.0, 57.0, 113.0)));
    float n001 = hash(dot(pi + vec3(0.0, 0.0, 1.0), vec3(1.0, 57.0, 113.0)));
    float n010 = hash(dot(pi + vec3(0.0, 1.0, 0.0), vec3(1.0, 57.0, 113.0)));
    float n011 = hash(dot(pi + vec3(0.0, 1.0, 1.0), vec3(1.0, 57.0, 113.0)));
    float n100 = hash(dot(pi + vec3(1.0, 0.0, 0.0), vec3(1.0, 57.0, 113.0)));
    float n101 = hash(dot(pi + vec3(1.0, 0.0, 1.0), vec3(1.0, 57.0, 113.0)));
    float n110 = hash(dot(pi + vec3(1.0, 1.0, 0.0), vec3(1.0, 57.0, 113.0)));
    float n111 = hash(dot(pi + vec3(1.0, 1.0, 1.0), vec3(1.0, 57.0, 113.0)));

    // 计算八个角的梯度向量
    vec3 g000 = grad(n000, pf - vec3(0.0, 0.0, 0.0));
    vec3 g001 = grad(n001, pf - vec3(0.0, 0.0, 1.0));
    vec3 g010 = grad(n010, pf - vec3(0.0, 1.0, 0.0));
    vec3 g011 = grad(n011, pf - vec3(0.0, 1.0, 1.0));
    vec3 g100 = grad(n100, pf - vec3(1.0, 0.0, 0.0));
    vec3 g101 = grad(n101, pf - vec3(1.0, 0.0, 1.0));
    vec3 g110 = grad(n110, pf - vec3(1.0, 1.0, 0.0));
    vec3 g111 = grad(n111, pf - vec3(1.0, 1.0, 1.0));

    // 点积
    float dot000 = dot(g000, pf - vec3(0.0, 0.0, 0.0));
    float dot001 = dot(g001, pf - vec3(0.0, 0.0, 1.0));
    float dot010 = dot(g010, pf - vec3(0.0, 1.0, 0.0));
    float dot011 = dot(g011, pf - vec3(0.0, 1.0, 1.0));
    float dot100 = dot(g100, pf - vec3(1.0, 0.0, 0.0));
    float dot101 = dot(g101, pf - vec3(1.0, 0.0, 1.0));
    float dot110 = dot(g110, pf - vec3(1.0, 1.0, 0.0));
    float dot111 = dot(g111, pf - vec3(1.0, 1.0, 1.0));

    // 线性插值
    float lerpX1 = mix(dot000, dot100, f.x);
    float lerpX2 = mix(dot010, dot110, f.x);
    float lerpX3 = mix(dot001, dot101, f.x);
    float lerpX4 = mix(dot011, dot111, f.x);

    float lerpY1 = mix(lerpX1, lerpX2, f.y);
    float lerpY2 = mix(lerpX3, lerpX4, f.y);

    float lerpZ = mix(lerpY1, lerpY2, f.z);

    // Perlin 噪声输出范围大致[-1,1]
    return lerpZ;
}

// -------------------------------------- Perlin End --------------------------------------



// -------------------------------------- Perlin End --------------------------------------

void main() {
    ivec3 id = ivec3(gl_GlobalInvocationID.xyz);
    if (any(greaterThanEqual(id, texSize))) return;

    vec3 uvw = vec3(id) / vec3(texSize);
    float noiseVal = worleyNoise3D(uvw);
    float Simplex = snoise(uvw* 10.0);
    float n = valueNoise(uvw * 10.0);
    float perlin = perlinNoise3D(uvw);
    imageStore(noiseTex, id, vec4(n, noiseVal, Simplex*0.5+0.5,perlin));
}